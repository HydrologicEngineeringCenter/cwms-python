name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  integration-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      # --- Disk Space Management ---
      # Create a writable directory in /mnt for Docker's temporary files
      - name: Create writable /mnt directory
        run: |
          sudo mkdir -p /mnt/docker-tmp
          sudo chown -R runner:runner /mnt/docker-tmp

      # --- Docker Image Caching with Compression ---
      - name: Cache Docker images
        id: cache-docker-images
        uses: actions/cache@v4
        with:
          # Cache to the new writable directory in /mnt
          path: /mnt/docker-tmp/docker-image-cache.tar.gz
          key: ${{ runner.os }}-docker-images-${{ hashFiles('docker-compose.yml')
            }}

      - name: Load compressed images from cache (on cache hit)
        if: steps.cache-docker-images.outputs.cache-hit == 'true'
        env:
          DOCKER_TMPDIR: /mnt/docker-tmp
        run: |
          gzip -dc /mnt/docker-tmp/docker-image-cache.tar.gz | docker load

      - name: Pull and save compressed images (on cache miss)
        if: steps.cache-docker-images.outputs.cache-hit != 'true'
        env:
          # Use the new writable directory for Docker's temporary operations
          DOCKER_TMPDIR: /mnt/docker-tmp
        run: |
          docker compose pull
          images=$(docker compose config --images)
          docker save $images | gzip -9 > /mnt/docker-tmp/docker-image-cache.tar.gz

      - name: Set up backend
        run: |
          # The images are already pulled or loaded from cache
          docker compose up -d

      - name: Set Up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.9.X'

      # Use actions-poetry to handle installation
      - name: Install Poetry and Dependencies
        uses: abatilo/actions-poetry@v4

      # Set Poetry to use an in-project virtual environment
      - name: Configure Poetry for in-project venv
        run: poetry config virtualenvs.in-project true

          # Poetry will handle installation and caching
      - name: Cache Python dependencies
        uses: actions/cache@v4
        id: cache-poetry-venv
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}

      # Install dependencies only if cache is missed
      - name: Install dependencies
        if: steps.cache-poetry-venv.outputs.cache-hit != 'true'
        run: poetry install --no-root

      # Run pytest and generate coverage report data.
      - name: Run Tests and Check Types
        run: |
          poetry run pytest tests/cda/ --doctest-modules --cov --cov-report=xml:out/coverage.xml
          poetry run mypy --strict cwms/

      - name: Generate Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: out/coverage.xml
          format: markdown
          output: both
          badge: true

      - name: Generate Job Summary
        uses: x-color/github-actions-job-summary@v0.1.1
        with:
          file: ./code-coverage-results.md
          vars: |-
            empty: empty
