name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  integration-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
      
      # Docker image caching steps
      - name: Cache Docker Images
        id: cache-docker-images
        uses: actions/cache@v4
        with:
          path: /tmp/.docker-images
          key: ${{ runner.os }}-docker-${{ hashFiles('docker-compose.yml') }}

      - name: Load images from cache
        if: steps.cache-docker-images.outputs.cache-hit == 'true'
        run: docker load --input /tmp/.docker-images/images.tar

      - name: set up backend
        run: |
          docker compose pull
          docker compose up --build -d
          
      - name: Capture auth servivce logs on failure
        if: failure()
        run: docker compose logs auth
        
      - name: Archive and save images to cache
        if: steps.cache-docker-images.outputs.cache-hit != 'true'
        run: |
          mkdir -p /tmp/.docker-images
          docker image save $(docker-compose config --services | xargs docker-compose images -q) --output /tmp/.docker-images/images.tar
          

        
      - name: Set Up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.9.X'

      # Use actions-poetry to handle installation
      - name: Install Poetry and Dependencies
        uses: abatilo/actions-poetry@v4
        with:
          python-version: '3.9.X'
          # Poetry will handle installation and caching
      
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry/artifacts
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}

      # Run pytest and generate coverage report data.
      - name: Run Tests and Check Types
        run: |
          poetry run pytest tests/cda/ --doctest-modules --cov --cov-report=xml:out/coverage.xml
          poetry run mypy --strict cwms/

      - name: Generate Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: out/coverage.xml
          format: markdown
          output: both
          badge: true

      - name: Generate Job Summary
        uses: x-color/github-actions-job-summary@v0.1.1
        with:
          file: ./code-coverage-results.md
          vars: |-
            empty: empty
